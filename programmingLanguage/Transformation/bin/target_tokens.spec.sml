(*#line 31.10 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult = SHELL of string * string * {line: word, column: word};
val error          = fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof            = fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
        fun split(x, []   )   = raise General.Fail("an_error")
          | split(x, y::ys)   = if x=y then ys else split(x,ys);

        fun splitFirst(symbol,[])     = [] (* symbol was not in the input list *)
          | splitFirst(symbol,x::xs)  = if x = symbol 
                                        then (* found split point *)
                                            []
                                        else (* keep looking      *)
                                            x::splitFirst(symbol,xs);

        val s0    = explode(yytext);
        val s1    = split(#"<",s0);
        val s2    = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
    
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\088\089\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\088\086\003\003\003\003\003\003\085\084\083\081\003\079\003\077\
\\076\074\074\074\074\074\074\074\074\074\003\073\067\065\063\003\
\\003\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\060\003\003\059\003\
\\003\056\052\007\049\045\038\007\007\034\007\007\007\031\028\026\
\\021\007\007\007\014\007\007\009\007\007\007\006\005\004\003\003\
\\003"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\010\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\011\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\012\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\013\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\018\008\008\008\008\008\008\008\
\\008\008\015\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\016\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\017\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\019\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\020\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\022\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\023\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\024\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\025\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\027\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\029\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\030\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\032\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\033\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\037\008\008\008\008\008\008\008\035\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\036\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\041\008\008\008\008\008\008\008\008\008\008\008\008\008\039\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\040\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\042\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\043\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\044\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\046\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\047\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\048\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\050\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\051\008\008\008\008\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\053\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\054\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\055\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\057\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\000\
\\000\008\008\008\008\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\008\
\\000\008\008\008\058\008\008\008\008\008\008\008\008\008\008\008\
\\008\008\008\008\008\008\008\008\008\008\008\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\
\\000\068\068\068\068\068\068\068\068\068\068\068\068\068\068\068\
\\068\068\068\068\068\068\068\068\068\068\068\000\000\000\000\000\
\\000\068\068\068\068\068\068\068\068\068\068\068\068\068\068\068\
\\068\068\068\068\068\068\068\068\068\068\068\000\000\000\000\000\
\\000"
),
 (68, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\068\068\068\068\068\068\068\068\068\068\000\000\000\000\069\000\
\\000\068\068\068\068\068\068\068\068\068\068\068\068\068\068\068\
\\068\068\068\068\068\068\068\068\068\068\068\000\000\000\000\068\
\\000\068\068\068\068\068\068\068\068\068\068\068\068\068\068\068\
\\068\068\068\068\068\068\068\068\068\068\068\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\071\071\071\071\071\071\071\071\071\071\000\000\000\000\000\000\
\\000\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\000\000\000\000\071\
\\000\071\071\071\071\071\071\071\071\071\071\071\071\071\071\071\
\\071\071\071\071\071\071\071\071\071\071\071\000\000\000\000\000\
\\000"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\078\078\078\078\078\078\078\078\078\078\000\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\078\
\\078"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\082\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (86, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (88, 
"\000\000\000\000\000\000\000\000\000\089\089\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\089\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 139)], trans = 0},
{fin = [(N 56),(N 139)], trans = 0},
{fin = [(N 114),(N 139)], trans = 0},
{fin = [(N 54),(N 139)], trans = 0},
{fin = [(N 125),(N 139)], trans = 7},
{fin = [(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 9},
{fin = [(N 125)], trans = 10},
{fin = [(N 125)], trans = 11},
{fin = [(N 125)], trans = 12},
{fin = [(N 52),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 14},
{fin = [(N 125)], trans = 15},
{fin = [(N 125)], trans = 16},
{fin = [(N 61),(N 125)], trans = 7},
{fin = [(N 125)], trans = 18},
{fin = [(N 125)], trans = 19},
{fin = [(N 37),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 21},
{fin = [(N 125)], trans = 22},
{fin = [(N 125)], trans = 23},
{fin = [(N 125)], trans = 24},
{fin = [(N 25),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 26},
{fin = [(N 76),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 28},
{fin = [(N 125)], trans = 29},
{fin = [(N 118),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 31},
{fin = [(N 125)], trans = 32},
{fin = [(N 110),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 34},
{fin = [(N 125)], trans = 35},
{fin = [(N 12),(N 125)], trans = 7},
{fin = [(N 32),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 38},
{fin = [(N 125)], trans = 39},
{fin = [(N 46),(N 125)], trans = 7},
{fin = [(N 125)], trans = 41},
{fin = [(N 125)], trans = 42},
{fin = [(N 125)], trans = 43},
{fin = [(N 67),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 45},
{fin = [(N 125)], trans = 46},
{fin = [(N 125)], trans = 47},
{fin = [(N 42),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 49},
{fin = [(N 125)], trans = 50},
{fin = [(N 106),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 52},
{fin = [(N 125)], trans = 53},
{fin = [(N 125)], trans = 54},
{fin = [(N 17),(N 125)], trans = 7},
{fin = [(N 125),(N 139)], trans = 56},
{fin = [(N 125)], trans = 57},
{fin = [(N 80),(N 125)], trans = 7},
{fin = [(N 112),(N 139)], trans = 0},
{fin = [(N 139)], trans = 60},
{fin = [], trans = 61},
{fin = [(N 137)], trans = 0},
{fin = [(N 93),(N 139)], trans = 63},
{fin = [(N 96)], trans = 0},
{fin = [(N 19),(N 139)], trans = 65},
{fin = [(N 83)], trans = 0},
{fin = [(N 88),(N 139)], trans = 67},
{fin = [], trans = 68},
{fin = [], trans = 69},
{fin = [], trans = 70},
{fin = [(N 133)], trans = 70},
{fin = [(N 91)], trans = 0},
{fin = [(N 8),(N 139)], trans = 0},
{fin = [(N 122),(N 139)], trans = 74},
{fin = [(N 122)], trans = 74},
{fin = [(N 122),(N 139)], trans = 0},
{fin = [(N 139)], trans = 77},
{fin = [(N 6)], trans = 78},
{fin = [(N 100),(N 139)], trans = 79},
{fin = [(N 73)], trans = 0},
{fin = [(N 98),(N 139)], trans = 81},
{fin = [(N 70)], trans = 0},
{fin = [(N 102),(N 139)], trans = 0},
{fin = [(N 29),(N 139)], trans = 0},
{fin = [(N 27),(N 139)], trans = 0},
{fin = [(N 139)], trans = 86},
{fin = [(N 86)], trans = 0},
{fin = [(N 2),(N 139)], trans = 88},
{fin = [(N 2)], trans = 88}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  100 => let val yytext=yymktext() in (*#line 78.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 769.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 102 => let val yytext=yymktext() in (*#line 79.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 771.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 106 => let val yytext=yymktext() in (*#line 80.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 773.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 110 => let val yytext=yymktext() in (*#line 81.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 775.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 112 => let val yytext=yymktext() in (*#line 82.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 777.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 114 => let val yytext=yymktext() in (*#line 83.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 779.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 118 => let val yytext=yymktext() in (*#line 84.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 781.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 12 => let val yytext=yymktext() in (*#line 52.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 783.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 122 => let val yytext=yymktext() in (*#line 86.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( "integer"    , yytext, getNextTokenPos( yytext ))(*#line 785.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 125 => let val yytext=yymktext() in (*#line 87.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( "identifier" , yytext, getNextTokenPos( yytext ))(*#line 787.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 133 => let val yytext=yymktext() in (*#line 89.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( generateSchemaTokenName( yytext ), yytext, getNextTokenPos( yytext ))(*#line 789.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 137 => let val yytext=yymktext() in (*#line 90.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( "" , yytext, getNextTokenPos( yytext))(*#line 791.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 139 => let val yytext=yymktext() in (*#line 92.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) error( "ignored an unprintable character: " ^ yytext ); getNextTokenPos( yytext ); lex()(*#line 793.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 17 => let val yytext=yymktext() in (*#line 53.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 795.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 19 => let val yytext=yymktext() in (*#line 54.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 797.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 2 => let val yytext=yymktext() in (*#line 48.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) getNextTokenPos( yytext ); lex()(*#line 799.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 25 => let val yytext=yymktext() in (*#line 55.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 801.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 27 => let val yytext=yymktext() in (*#line 56.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 803.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 29 => let val yytext=yymktext() in (*#line 57.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 805.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 32 => let val yytext=yymktext() in (*#line 58.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 807.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 37 => let val yytext=yymktext() in (*#line 59.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 809.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 42 => let val yytext=yymktext() in (*#line 60.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 811.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 46 => let val yytext=yymktext() in (*#line 61.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 813.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 52 => let val yytext=yymktext() in (*#line 62.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 815.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 63.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 817.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 56 => let val yytext=yymktext() in (*#line 64.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 819.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 49.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) getNextTokenPos( yytext ); lex()(*#line 821.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 61 => let val yytext=yymktext() in (*#line 65.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 823.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 66.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 825.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 70 => let val yytext=yymktext() in (*#line 67.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 827.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 73 => let val yytext=yymktext() in (*#line 68.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 829.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 76 => let val yytext=yymktext() in (*#line 69.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 831.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 8 => let val yytext=yymktext() in (*#line 51.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 833.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 80 => let val yytext=yymktext() in (*#line 70.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 835.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 71.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 837.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 86 => let val yytext=yymktext() in (*#line 72.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 839.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 88 => let val yytext=yymktext() in (*#line 73.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 841.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 91 => let val yytext=yymktext() in (*#line 74.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 843.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 93 => let val yytext=yymktext() in (*#line 75.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 845.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 96 => let val yytext=yymktext() in (*#line 76.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 847.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| 98 => let val yytext=yymktext() in (*#line 77.21 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec"*) SHELL( yytext, yytext, getNextTokenPos( yytext ))(*#line 849.1 "C:\Tools\Group_4_Milestone_4\group4\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
